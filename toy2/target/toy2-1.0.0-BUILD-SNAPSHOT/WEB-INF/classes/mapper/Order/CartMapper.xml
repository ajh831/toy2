<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fastcampus.toy2.dao.CartMapper">
    <sql id="selectFromCart">
        SELECT crt_id, mbr_id,
               created_dt, created_id, updated_dt, updated_id
        FROM cart
    </sql>

    <!-- 전체 장바구니 수 확인  -->
    <!--  장바구니 번호 만들때 사용도 가능  -->
    <select id="count" resultType="int">
        SELECT count(*)
        FROM cart
    </select>

    <!--  장바구니 ID로 검색  -->
    <select id="selectCartId" parameterType="Long" resultType="CartDto">
        <include refid="selectFromCart"/>
        WHERE
            crt_id = #{crt_id}
    </select>

    <!--   고객의 장바구니가 존재하는지 확인  -->
    <select id="selectUserCart" parameterType="String" resultType="CartDto">
        <include refid="selectFromCart"/>
        WHERE mbr_id = #{mbr_id}
    </select>

    <!--   고객의 장바구니 삭제  -->
    <delete id="deleteUserCart" parameterType="String">
        DELETE FROM cart
        WHERE mbr_id = #{mbr_id}
    </delete>

<!--  CRUD 작성  -->
<!--
  1. 장바구니에서 가장 필요한 작업은 Insert, Update
    - 장바구니에 담길 때 insert작업이 필요
    - 장바구니가 삭제될 때 실제로 삭제하는 것이 아닌 장바구니의 상태를 변경해주기 위해 update작업이 필요

  2. 장바구니는 그냥 생성되는 것이 아닌
    회원이 상품을 장바구니가 먼저 생성되고 장바구니 번호를 반환하며 반환한 장바구니 번호를 이용하여 장바구니_상품 테이블에서 Key로 사용해야 됨
  -->

<!--
    장바구니 번호를 반환해서 바로 장바구니_상품 테이블에 insert할 때 이용해야 되므로 useGeneratedKey=true로 설정하고 keyProperty="crt_id"를 반환
    장바구니 내의 상품 중 하나라도 주문이 완료되는 경우 기존의 장바구니의 상태를 비활성화 하고, 새로운 장바구니로 담아주어야 됨
  -->
<!--  생각해보니까 crt_id는 만들어지는 컬럼이므로 바로 반환하지 않아도 될 것 같음!  -->
<!--    <insert id="insert" parameterType="CartDto" useGeneratedKeys="true" keyProperty="crt_id">-->
    <insert id="insert" parameterType="CartDto" useGeneratedKeys="true" keyProperty="crt_id">
        INSERT INTO cart(crt_id, mbr_id, created_id, updated_id)
            VALUES (#{crt_id}, #{mbr_id}, #{mbr_id}, #{mbr_id})
    </insert>

    <!-- 전체 삭제  -->
    <delete id="deleteAll">
        DELETE FROM cart
    </delete>

    <!--  회원들의 장바구니 수 확인  -->
    <select id="countMember" resultType="int">
        SELECT count(*)
        FROM cart
        WHERE mbr_id IS NOT NULL
    </select>

    <!-- 비회원들의 장바구니 수 확인  -->
    <select id="countNoMember" resultType="int">
        SELECT count(*)
        FROM cart
        WHERE mbr_id IS NULL
    </select>

</mapper>



        <!--    &lt;!&ndash;기존의 장바구니가 사라지고 새로운 장바구니를 추가하는 경우 기존의 장바구니의 상태는 비활성화 updateStatus&ndash;&gt;-->
        <!--    <update id="update" parameterType="int">-->
        <!--        UPDATE cart-->
        <!--        SET crt_st = 'N'-->
        <!--        WHERE crt_id = #{crt_id}-->
        <!--    </update>-->
        <!--    &lt;!&ndash;  기존 장바구니 정보를 가지고 새로운 장바구니를 생성  &ndash;&gt;-->
        <!--    <insert id="insertRe" parameterType="CartDto" useGeneratedKeys="true" keyProperty="crt_id">-->
        <!--        INSERT INTO cart(crt_id, mbr_id, crt_st, created_id, updated_id)-->
        <!--        VALUES (#{crt_id}, #{mbr_id}, #{crt_st}, #{mbr_id}, #{mbr_id})-->
        <!--    </insert>-->

        <!--    해당하는 연월일에 생성되어 있는 장바구니 중 제일 높은 번호를 구하기-->
        <!--    (바로 구매하기해도 장바구니에 담기는 것 확인하기)  &ndash;&gt;-->
        <!--    <select id="maxCartSeq" parameterType="String" resultType="String">-->
        <!--        SELECT MAX(SUBSTR(crt_id, 11))-->
        <!--        FROM cart-->
        <!--        WHERE crt_id LIKE CONCAT(#{datePart}, '%');-->
        <!--    </select>-->

        <!--    &lt;!&ndash;   고객의 활성상태 장바구니가 존재하는지 확인  &ndash;&gt;-->
        <!--    <select id="userCartActive" parameterType="String" resultType="CartDto">-->
        <!--        <include refid="selectFromCart"/>-->
        <!--        WHERE mbr_id = #{mbr_id}-->
        <!--            AND crt_st = 'Y'-->
        <!--    </select>-->